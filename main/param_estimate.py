# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUhCEdXN-tqYo3KjgDODhUVXoVV1clgT
"""

#@title Importa moduli e funzioni utili
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from numba import njit
from scipy.optimize import curve_fit
import scipy.stats
from santa_fe_4 import *


plt.style.use('dark_background')

#@title Import trade data and order data
#@title import trade data
#create a list of all the files in the folder
DIR_1 = "../data/energia/trade_ottobre2021_nuovo/trade_ottobre2021/"
trade_files =os.listdir(DIR_1)
trade_files.sort()
lst_trade = []
for element in trade_files:
    # import data

    df = pd.read_csv(DIR_1 + element)

    df.drop(columns = ["Unnamed: 0"], inplace = True)

    # transform the column Datetime from string to datetime
    df["DateTime"]= pd.to_datetime(df["DateTime"])

    #delete trades befor 6:00 and after 17:00
    df = df.loc[df["DateTime"].dt.hour > 6]
    df = df.loc[df["DateTime"].dt.hour < 16]

    df = df.loc[df["DateTime"].dt.day != 27]
    lst_trade.append(df)

trade_df = pd.concat(lst_trade)
trade_df.head()


#create a list of all the files in the folder
clean_data = pd.read_csv("../data/energia/order/order.csv", index_col = 0)

DIR_2 = "../data/energia/order/"
o_files =os.listdir(DIR_2)
o_files.sort()
lst_df = []
for element in o_files:
  df = pd.read_csv(DIR_2 + element)
  df["DateTime"]= pd.to_datetime(df["DateTime"])
  df.drop(columns = ["Unnamed: 0"], inplace = True)

  df["Spread"] = clean_data["Spread"] * 100

  df = df.loc[df["DateTime"].dt.hour > 6]
  df = df.loc[df["DateTime"].dt.hour < 16]
  df= df.loc[df["Spread"] > 0]
  df = df.loc[df["DateTime"].dt.day != 27]
  lst_df.append(df)



#@title Stima parametri (ignora non matching orders)
clean_data["DateTime"] = pd.to_datetime(clean_data["DateTime"])
clean_data = clean_data.loc[clean_data["DateTime"].dt.hour > 6]
clean_data = clean_data.loc[clean_data["DateTime"].dt.hour < 16]
clean_data = clean_data[clean_data["Spread"]>0]
clean_data = clean_data[clean_data["DateTime"].dt.day != 27]
days = pd.unique(clean_data["DateTime"].dt.day)
lenght = len(days)
l = []
u = []
delta = []
date = []
spread = []
volatility = []
df_type = []


for j, data in enumerate(lst_df):
  if j != 1:
    print(j)
    for i,element in enumerate(days):
      # see what happens at the best quotes
      new_data = data.loc[data["DateTime"].dt.day == element]
      df = clean_data.loc[clean_data["DateTime"].dt.day == element]

      X_lo = new_data.loc[(new_data["Type"] == "Limit") & (new_data["Quote"] == "0") ]
      X_mo = new_data.loc[new_data["Type"] == "Market"]
      X_c  = new_data.loc[(new_data["Type"] == "Cancel") & (new_data["Quote"] == "0")]

      N_lo = len(X_lo)
      N_mo = len(X_mo)
      N_c = len(X_c)
      tot = N_lo + N_mo + N_c


      #compute lambda, mu, delta
      v0 = X_lo["Volume"].mean()
      vv = (df["BidVolume_0"].mean() + df["AskVolume_0"].mean()) / 2
      u.append(0.5 / tot / v0 * (X_mo["Volume"].sum()))
      all_l =  0.5 * N_lo / tot
      n = 2 * (1 + ((X_lo["Spread"] // 2).mean()))
      l.append(all_l / n)
      delta.append(.5 / tot / vv * (X_c["Volume"].sum()))
      #compute volatility and mid spread for the day
      date.append(element)
      spread.append(df["Spread"].multiply(100).mean())
      mp = df["MidPrice"].multiply(100).to_numpy()
      volatility.append(np.sqrt(((mp[1:]- mp[:-1])**2).mean()))
      df_type.append(o_files[j])

str_date = [str(int(day)) + "/10" for day in date]

params = pd.DataFrame(str_date,columns=["Date"])
params["DF type"] = df_type
params["Lambda"] = l
params["Mu"] = u
params["Delta"] = delta
params["MeanSpread"] = spread
params["Volatility"] = volatility

print("Number of nan values : ", params.isna().sum())

#@title Simulazioni
mean_sp = []
vol = []

i = 0
for limit, market, cancel in zip(l, u, delta):
  sp = np.array([-1])
  daily_sp = int(params["MeanSpread"].at[i])
  while all(element > 0 for element in sp) is False:
    lob, sp, md, shift  = sim_LOB(limit, market, cancel, daily_sp * 60, 500_000)

    if all(element > 0 for element in sp) is False:
        print("Fail")
  mean_sp.append(sp.mean())
  mm = md + shift.cumsum()
  volatility = np.sqrt(((mm[1:]- mm[:-1])**2).mean())
  vol.append(volatility)
  print(i, sp.mean(), volatility)
  print(i, params["MeanSpread"].at[i], params["Volatility"].at[i])
  i += 1

params["SimSpread"] = mean_sp
params["SimVolatility"] = vol

params.to_csv("PP_4.csv")
