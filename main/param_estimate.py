# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUhCEdXN-tqYo3KjgDODhUVXoVV1clgT
"""

#@title Importa moduli e funzioni utili
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from numba import njit
from scipy.optimize import curve_fit
import scipy.stats
from santa_fe_2 import *


plt.style.use('dark_background')

#@title Import trade data and order data
#@title import trade data
#create a list of all the files in the folder
DIR_1 = "../data/energia/trade_ottobre2021_nuovo/trade_ottobre2021/"
trade_files =os.listdir(DIR_1)
trade_files.sort()
lst_trade = []
for element in trade_files:
    # import data

    df = pd.read_csv(DIR_1 + element)

    df.drop(columns = ["Unnamed: 0"], inplace = True)

    # transform the column Datetime from string to datetime
    df["DateTime"]= pd.to_datetime(df["DateTime"])

    #delete trades befor 6:00 and after 17:00
    df = df.loc[df["DateTime"].dt.hour > 6]
    df = df.loc[df["DateTime"].dt.hour < 16]
    lst_trade.append(df)

trade_df = pd.concat(lst_trade)
trade_df.head()


#create a list of all the files in the folder
DIR = "../data/energia/LOB_ottobre21/LOB_ottobre21/"
lob_files =os.listdir(DIR)
lob_files.sort()
lst_order = []
for element in lob_files:
    # import data
    df = pd.read_csv(DIR+ element)
    df.fillna(0, inplace = True)

    # delete first two column and empty LOB
    df.drop(columns = ["Unnamed: 0", "key"], inplace = True)
    df.drop(df[df["AskPrice_0"] == 0].index.to_list(), inplace = True)
    df.drop(df[df["BidPrice_0"] == 0].index.to_list(), inplace = True)

    # scale price to dollar cent and add mid price and spread
    df["MidPrice"] = (df["BidPrice_0"] + df["AskPrice_0"]) / 2
    df["Spread"] = df["AskPrice_0"] - df["BidPrice_0"]

    # transform the column Datetime from string to datetime
    df["Datetime"]= pd.to_datetime(df["Datetime"])

    #delete trades befor 6:00 and after 17:00
    df = df.loc[df["Datetime"].dt.hour > 6]
    df = df.loc[df["Datetime"].dt.hour < 16]

    #create a new column that represent second to midnight
    seconds = np.zeros(len(df))
    for i, date in enumerate(df["Datetime"]):
        seconds[i] = date.second + 60 * date.minute + 3600 * date.hour + \
                                    date.microsecond * 1e-6
    df["Time"] = seconds

    #add a column that represent the absolute change in volume between two trades
    df["TotVolume"] = np.abs(df.iloc[:,2:-2:2].diff().fillna(0)).sum(axis = 1)

    #delete rows with spread <= 0
    df = df.loc[df["Spread"] > 0]

    df = df.loc[df["Datetime"].dt.hour > 6]
    df = df.loc[df["Datetime"].dt.hour < 16]

    lst_order.append(df)

clean_data = pd.concat(lst_order)
clean_data.reset_index(inplace = True, drop = True)

DIR_2 = "../data/energia/order/"
o_files =os.listdir(DIR_2)
o_files.sort()
lst_df = []
for element in o_files:
  df = pd.read_csv(DIR_2 + element)
  df["DateTime"]= pd.to_datetime(df["DateTime"])
  df.drop(columns = ["Unnamed: 0"], inplace = True)
  lst_df.append(df)

#@title Stima parametri (ignora non matching orders)
days = pd.unique(clean_data["Datetime"].dt.day)

lenght = len(days)
l = []
u = []
delta = []
date = []
spread = []
volatility = []
df_type = []

for j, data in enumerate(lst_df):
  if j != 0:
    for i,element in enumerate(days):
      # see what happens at the best quotes
      X_lo = data.loc[(data["Type"] == "Limit") & (data["Quote"] == "0") & (data["DateTime"].dt.day == element)]
      X_mo = data.loc[data["Type"] == "Market"].loc[data["DateTime"].dt.day == element]
      X_c = data.loc[(data["Type"] == "Cancel") & (data["Quote"] == "0") & (data["DateTime"].dt.day == element)]

      df = clean_data.loc[clean_data["Datetime"].dt.day == element]

      N_lo = len(X_lo)
      N_mo = len(X_mo)
      N_c = len(X_c)

      tot = N_lo + N_mo + N_c

      X_lo["Spread"] =  df["Spread"]*100

      #compute lambda, mu, delta
      v0 = X_lo["Volume"].mean()
      vv = (df["BidVolume_0"].mean() + df["AskVolume_0"].mean()) / 2
      u.append(0.5 / tot / v0 * (X_mo["Volume"].sum()))
      all_l = .5 * N_lo / tot
      n = 2 * (1 + ((X_lo["Spread"] // 2).mean()))
      l.append(all_l / n)
      delta.append(.5 / tot / vv * (X_c["Volume"].sum()))
      #compute volatility and mid spread for the day
      date.append(element)
      spread.append(df["Spread"].multiply(100).mean())
      mp = np.log(df["MidPrice"].multiply(100).to_numpy())
      volatility.append(np.sqrt(((mp[1:]- mp[:-1])**2).mean()))
      df_type.append(o_files[j])

str_date = [str(int(day)) + "/10" for day in date]

params = pd.DataFrame(str_date,columns=["Date"])
params["DF type"] = df_type
params["Lambda"] = l
params["Mu"] = u
params["Delta"] = delta
params["MeanSpread"] = spread
params["Volatility"] = volatility

#@title Simulazioni
mean_sp = []
vol = []

i = 0
for limit, market, cancel in zip(l, u, delta):
  print(i)
  sp = np.array([-1])
  while all(element > 0 for element in sp) is False:
    lob, _, _, _  = simulate_lob(limit, market, cancel, 7500, 500_000)
    lob = lob[100_000:]
    md, sp = find_mid_spread_lob(lob)
    if all(element > 0 for element in sp) is False:
        print("Fail")
  mean_sp.append(sp.mean())
  mm = np.log(md)
  vol.append(np.sqrt(((mm[1:]- mm[:-1])**2).mean()))
  i += 1

params["SimSpread"] = mean_sp
params["SimVolatility"] = vol

params.to_csv("PP.csv")
