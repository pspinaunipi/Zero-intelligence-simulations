import unittest
import numpy
import sys, os
sys.path.append("../")
from santa_fe_1 import *
from numba.typed import List

class TestSantaFe(unittest.TestCase):

    def test_find_min_queue(self):

        a = a = List([List([6,8,3]), List([15,6,3,4,7]), List([33,5,8,1,5])])

        self.assertEqual(find_min_queue(a), (1,2))

    def test_out_of_equilibrium_start(self):

        a = out_of_equilibrium_start(10, 1)[0]
        b = np.array([1,1,1,1,1,-1,-1,-1,-1,-1], dtype=np.int16)
        np.testing.assert_array_equal(a,b)

        a = out_of_equilibrium_start(9, 1)[0]
        b = np.array([1,1,1,1,-1,-1,-1,-1,-1], dtype=np.int16)
        np.testing.assert_array_equal(a,b)

    def test_find_max_min(self):

        k = List([1,2,3,4,0,0,-8,-9,-6,-3])

        self.assertEqual(find_max_min(k),(3,6))

    def test_find_mid_spread(self):

        k = List([1,2,3,4,0,0,-8,-9,-6,-3])
        self.assertEqual(find_mid_spread(k),(4.5,3))

        kk = np.array([[1,2,3,4,0,0,-8,-9,-6,-3],[1,2,3,0,0,0,-8,-9,-6,-3]])
        np.testing.assert_array_equal(find_mid_spread_lob(kk),([4.5,4],[3,4]))

    def test_do_limit_order(self):
        k = List([1,2,3,4,0,0,-8,-9,-6,-3])
        self.assertEqual(do_limit_order(k,5),(5,-1))
        self.assertEqual(do_limit_order(k,4),(4,1))
        self.assertEqual(do_limit_order(k,3),(3,1))

    def test_do_market_order(self):
        k = List([1,2,3,4,0,0,-8,-9,-6,-3])
        self.assertEqual(do_market_order(k,0),(6,1))
        self.assertEqual(do_market_order(k,1),(3,-1))

    def test_do_limit_order(self):
        k = List([1,2,3,4,0,0,-8,-9,-6,-3])
        self.assertEqual(do_cancel_order(k,3),(3,-1))
        self.assertEqual(do_cancel_order(k,7),(7,1))

    def test_find_best_time(self):
        kk = List([List([8,6,3,4]),List([2,6,3])])
        a = List([23,45,2546,25])
        b = List([33,56,86,253])
        self.assertEqual(find_best_time(a,b,kk),(2,2))
        a = List([33,1,86,253])
        self.assertEqual(find_best_time(a,b,kk),(1,0))

    def test_add_order_decay(self):
        kk = List([List([8,6,3,4]),List([2,6,3])])
        add_order_decay(kk,1,5)
        self.assertEqual(kk, List([List([8,6,3,4]),List([2,6,3,5])]))

    def test_update_times(self):
        b = List([33,56,86,253])
        self.assertEqual(update_times(b,33),List([0,56-33,86-33,253-33]))
        kk = List([List([8,6,3,4]),List([2,6,3])])
        self.assertEqual(update_c_times(kk,1), List([List([7,5,2,3]),List([1,5,2])]))

    def test_execute_order(self):
        #test cancel
        lim = List([4.,7.,8.,5.])
        mark = List([4.,5.])
        canc = List([List([3.,4.]),List([1.,7.]),List([8.,4.]),List([9.,4.])])
        lob = np.array([1,1,0,-8])
        a, b, c = execute_order(lim, mark, canc, lob, 1, 1, 1)
        self.assertEqual([a,b,c], [1, -1, "cancel"])
        #test market
        mark = List([6.,0.6])
        a, b, c = execute_order(lim, mark, canc, lob, 1, 1, 1)
        self.assertEqual([a,b,c], [1, -1, "market"])
        #test limit
        lim = List([4.,7.,8.,0.2])
        a, b, c = execute_order(lim, mark, canc, lob, 1, 1, 1)
        self.assertEqual([a,b,c], [3, -1, "limit"])


if __name__ == "__main__":
    unittest.main()
